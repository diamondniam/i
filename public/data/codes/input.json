{
  "path": "@/components/UI/Input",
  "template": "<template>\n  <InputContainer\n    ref=\"inputFieldContainer\"\n    data-testid=\"input-container\"\n    :options=\"options\"\n    :placeholder=\"placeholder\"\n    :is-focused=\"isFocused\"\n    :value=\"value\"\n    @focus-changed=\"isFocused = $event\"\n  >\n    <template #default=\"{ clearError }\">\n      <div\n        v-if=\"!type\"\n        class=\"relative w-full h-10 flex items-center rounded-lg\"\n        :class=\"[\n          { 'cursor-not-allowed': options?.disabled },\n          options?.classes?.inputTypeContainer,\n        ]\"\n      >\n        <slot name=\"prepend\"></slot>\n\n        <input\n          data-testid=\"input\"\n          v-model=\"value\"\n          v-maska=\"maskHandler\"\n          :inputmode=\"getInputMode\"\n          :type=\"options?.type ? options?.type : 'text'\"\n          :class=\"\n            twMerge(\n              'border outline-none border-black/[.2] rounded-lg w-full h-full px-3 transition-colors',\n              clsx({\n                'input-error': options?.error,\n                'border-transparent': options?.borderless,\n                'pointer-events-none': options?.disabled,\n                'bg-transparent': options?.transparent,\n                'rounded-r-0': isIconsVisible,\n              }),\n              options?.classes?.input,\n            )\n          \"\n          :name=\"options?.name\"\n          :autocomplete=\"options?.autocomplete ? options?.autocomplete : 'off'\"\n          :placeholder=\"placeholder\"\n          :style=\"{\n            borderRight: `${isIconsVisible ? 'none !important' : ''}`,\n            borderColor: options?.borderless ? 'transparent' : '',\n          }\"\n          :disabled=\"options?.disabled\"\n          @maska=\"onMaska\"\n          @input=\"inputHandler\"\n          @beforeinput=\"beforeInput\"\n          @focus=\"\n            isFocused = true;\n            clearError();\n          \"\n          @blur=\"isFocused = false\"\n        />\n      </div>\n\n      <div\n        v-if=\"isIconsVisible\"\n        data-testid=\"icons\"\n        ref=\"icons\"\n        id=\"icons\"\n        class=\"absolute right-0 top-1/2 h-full rounded-r-lg -translate-y-1/2 whitespace-nowrap flex [&>*]:pr-3 items-center w-max\"\n        :class=\"{\n          'border border-black/[.2] border-l-0': !options?.borderless,\n          'border border-transparent': options?.borderless,\n          'bg-white': !options?.transparent,\n          'input-error': options?.error,\n        }\"\n        :style=\"{ borderLeft: 'none !important' }\"\n        @click.stop\n      >\n        <transition-group name=\"fade-in-out\" mode=\"out-in\">\n          <div\n            v-for=\"icon in options?.icons.filter(Boolean)\"\n            :key=\"icon\"\n            class=\"h-full flex items-center w-max\"\n            :class=\"{\n              'sm:hidden': icon === 'searchButtonMobile',\n              hidden: icon === 'clear' && !value?.length,\n              'max-sm:hidden':\n                icon === 'search' && options?.icons.includes('searchButtonMobile'),\n              'first:pl-3': icon,\n            }\"\n            @click=\"getIconFunction(icon)\"\n          >\n            <button\n              v-if=\"icon === 'clear' && value?.length\"\n              data-testid=\"clear-icon\"\n              class=\"cursor-pointer h-[14px]\"\n              v-aria=\"{ label: 'Clear' }\"\n              @click=\"\n                value = '';\n                $emit('pass-data', value);\n              \"\n            >\n              <Image src=\"icons/closeSelect.svg\" class=\"h-full\" />\n            </button>\n\n            <Image v-if=\"icon === 'search'\" src=\"icons/search.svg\" alt=\"Search\" />\n\n            <Button\n              v-if=\"icon === 'searchButtonMobile'\"\n              data-testid=\"search-button-mobile\"\n              :validation-group-id=\"options?.validationGroupId\"\n              :options=\"{ disabled: options?.iconButtonDisabled }\"\n              class=\"sm:hidden !p-0 !h-[calc(75%)] !bg-transparent border-none w-max\"\n              @submit-event=\"$emit('submit-event')\"\n            >\n              <template #custom-button>\n                <div\n                  class=\"bg-thirdColor p-1 h-full w-max max-w-[35px] rounded-md cursor-pointer active:brightness-90 flex items-center justify-center\"\n                >\n                  <Image\n                    v-show=\"!options?.iconButtonDisabled\"\n                    src=\"icons/search.svg\"\n                    class=\"getWhite h-full w-[30px]\"\n                    alt=\"Search\"\n                  />\n                  <div\n                    v-show=\"options?.iconButtonDisabled\"\n                    data-testid=\"loader-circle\"\n                    class=\"flex items-center justify-center w-[28px]\"\n                  >\n                    <div class=\"loader\"></div>\n                  </div>\n                </div>\n              </template>\n            </Button>\n\n            <div\n              v-if=\"icon === 'filter'\"\n              class=\"flex gap-3 items-center cursor-pointer h-[calc(60%)]\"\n              @click.stop=\"$emit('filter-icon')\"\n            >\n              <p class=\"max-md:hidden\">Advanced search</p>\n              <Image class=\"h-full getGray\" src=\"icons/sliders.svg\" alt=\"\" />\n            </div>\n\n            <Image v-if=\"icon === 'edit'\" src=\"icons/edit.svg\" alt=\"\" />\n          </div>\n        </transition-group>\n      </div>\n    </template>\n  </InputContainer>\n</template>\n\n<script>\nimport { vMaska } from 'maska/vue';\nimport maskOptions from '@/utils/Components/inputMaskHandler.js';\nimport InputContainer from '../InputContainer';\nimport { twMerge } from 'tailwind-merge';\nimport clsx from 'clsx';\n\nexport default {\n  name: 'Input',\n  components: { InputContainer },\n  directives: { maska: vMaska },\n  props: [\n    'type',\n    'placeholder',\n    'isActive',\n    'parentValue',\n    'options',\n    'getCache',\n    'setCache',\n  ],\n  setup() {\n    return {\n      twMerge,\n      clsx,\n    };\n  },\n  data() {\n    return {\n      value: null,\n      element: null,\n\n      isFocused: false,\n      isMounted: false,\n    };\n  },\n  computed: {\n    maskHandler() {\n      let options = maskOptions(this.options);\n\n      return {\n        mask: options.mask,\n        tokens: options.tokens,\n      };\n    },\n    handleHiddenTypeValue: {\n      get() {\n        const value = this.value;\n        if (this.value?.length && this.options?.hideNotFull && !this.showHidden) {\n          return value.length > 12\n            ? `${value.slice(0, 6)}******${value.slice(-4)}`\n            : `${value.slice(0, 6)}${value\n                .slice(6, value.length - 4)\n                .replace(/./g, '*')}${value.slice(-4)}`;\n        } else return value;\n      },\n      set(value) {\n        this.value = value;\n      },\n    },\n    getInputMode() {\n      if (this.options?.inputMode) return this.options?.inputMode;\n\n      if (\n        this.options?.onlyNumbers ||\n        this.options?.validationType === 'number' ||\n        this.options?.validationType === 'bankCard' ||\n        this.options?.validationType === 'imei'\n      )\n        return 'numeric';\n      else if (this.options?.validationType === 'email') return 'email';\n      else if (this.options?.validationType === 'phone') return 'tel';\n      else if (this.options?.validationType === 'ipAddress') return 'decimal';\n      else if (this.options?.validationType === 'site') return 'url';\n      else return 'text';\n    },\n    isIconsVisible() {\n      const icons = this.options?.icons;\n\n      if (!icons) return false;\n\n      const conditionalIcons = [\n        { name: 'clear', condition: this.value?.length },\n        {\n          name: 'searchButtonMobile',\n          condition: this.isMobile,\n        },\n      ];\n\n      let isConditionsPasses = false;\n      let hasConditionalIcons = 0;\n\n      conditionalIcons.forEach((icon) => {\n        if (icons.includes(icon.name)) {\n          hasConditionalIcons += 1;\n\n          if (icon.condition) {\n            isConditionsPasses = true;\n          }\n        }\n      });\n\n      return (\n        icons.length > 0 &&\n        (!hasConditionalIcons || (isConditionsPasses && hasConditionalIcons))\n      );\n    },\n    isMobile() {\n      return this.$isMobile('sm');\n    },\n  },\n  watch: {\n    value() {\n      this.$nextTick(() => {\n        this.setInputWidth();\n      });\n    },\n    parentValue(val) {\n      this.value = val;\n    },\n    isFocused(val) {\n      this.$emit('focus-changed', val);\n    },\n  },\n  mounted() {\n    if (this.parentValue) this.value = this.parentValue;\n\n    if (this.options?.cacheId && this.getCache) {\n      const cacheValue = this.getCache({ name: this.options?.cacheId });\n\n      if (cacheValue !== undefined) {\n        if (!this.type) this.value = cacheValue;\n      }\n    }\n\n    if (!this.type) {\n      window.addEventListener('resize', this.setInputWidth);\n    }\n\n    setTimeout(() => {\n      this.isMounted = true;\n    }, 0);\n  },\n  unmounted() {\n    window.removeEventListener('resize', this.setInputWidth);\n  },\n  methods: {\n    beforeInput(e) {\n      const input = e.srcElement;\n      const currentValue = input.value;\n      const selectionStart = input.selectionStart;\n\n      if (e.data === ' ') {\n        if (selectionStart === 0) {\n          e.preventDefault();\n          return;\n        }\n\n        if (\n          currentValue[selectionStart - 1] === ' ' ||\n          currentValue[selectionStart] === ' '\n        ) {\n          e.preventDefault();\n        }\n      }\n\n      if (e.inputType === 'insertFromPaste' && /\\S {2,}\\S/.test(e.data)) {\n        this.value = this.value.replace(/\\s+/g, ' ');\n      }\n\n      this.$emit('beforeinput', e);\n    },\n    onMaska(event) {\n      let value = event.detail.unmasked;\n      if (this.options?.mask) this.handleChange(value);\n    },\n    inputHandler(event) {\n      let value = event.target.value;\n      this.value = value;\n\n      if (!this.options?.mask) {\n        if (this.options?.onlyLetters)\n          this.value = this.value.replace(/[^a-zA-Z\\s]/g, '');\n        if (this.options?.upperCase) this.value = this.value.toUpperCase();\n        else if (this.options?.lowerCase) this.value = this.value.toLowerCase();\n\n        this.handleChange(this.value);\n      }\n    },\n    handleChange(data) {\n      this.$emit('pass-data', data);\n      if (this.options?.cacheId && this.setCache)\n        this.setCache({ name: this.options.cacheId, data });\n    },\n    setInputWidth() {\n      const inputFieldContainer = this.$refs.inputFieldContainer?.$el;\n      const inputPlaceholder = this.$refs.inputPlaceholder?.$refs?.dynamicPlaceholder;\n      const icons = this.$refs.icons;\n\n      if (!inputFieldContainer) return;\n      const input = inputFieldContainer.querySelector('input');\n\n      if (\n        inputPlaceholder &&\n        this.options?.icons &&\n        this.options?.icons.length > 0 &&\n        icons &&\n        this.isIconsVisible\n      ) {\n        const iconsWidth = icons.offsetWidth;\n        input.style.width = `calc(100% - ${iconsWidth}px)`;\n        if (inputPlaceholder)\n          inputPlaceholder.style.width = `calc(100% - ${iconsWidth + 30}px)`;\n      } else if (\n        this.options?.icons &&\n        this.options?.icons?.length > 0 &&\n        !this.isIconsVisible\n      ) {\n        input.style.width = '100%';\n        if (inputPlaceholder) inputPlaceholder.style.width = '100%';\n      }\n    },\n    getIconFunction(name) {\n      if (name === 'clear') {\n        this.value = '';\n        this.$emit('pass-data', this.value);\n      }\n      this.$emit(`${name}-button-clicked`);\n    },\n  },\n};\n</script>\n",
  "lang": "vue"
}
