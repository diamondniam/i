{
  "path": "buttonShouldTriggerInputValidations.spec",
  "template": "import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';\nimport Button from '@/components/UI/Button';\nimport Input from '@/components/UI/Input';\nimport Select from '@/components/UI/Select';\nimport FileBlock from '@/components/UI/FileInput';\nimport { fireEvent, render, screen } from '@testing-library/vue';\nimport VueSelect from 'vue-select';\nimport { data as fileData } from '../components/UI/FileInput/fileOutput.spec';\nimport Textarea from '@/components/UI/Textarea';\nimport Checkbox from '@/components/UI/Checkbox';\nimport Textarea from '@/components/UI/Textarea';\nimport DatePicker from '@/components/UI/DatePicker';\n\ndescribe('ButtonShouldTriggerInputValidations', async () => {\n  const submitId = 'test-submit-id';\n\n  beforeEach(() => {\n    vi.useFakeTimers();\n  });\n\n  afterEach(() => {\n    vi.useRealTimers();\n  });\n\n  it('should trigger errors, set styles on \"submitButton\" click and scroll to first error', async () => {\n    const submitButton = render(Button, {\n      props: {\n        validationGroupId: submitId,\n      },\n    });\n\n    const button = render(Button, {\n      props: {\n        options: {\n          groupId: submitId,\n        },\n      },\n    });\n    const input = render(Input, {\n      props: {\n        options: {\n          groupId: submitId,\n        },\n      },\n    });\n    const textarea = render(Textarea, {\n      props: {\n        options: {\n          groupId: submitId,\n        },\n      },\n    });\n    const checkbox = render(Checkbox, {\n      props: {\n        options: {\n          groupId: submitId,\n        },\n      },\n    });\n    const select = render(Select, {\n      props: {\n        options: {\n          groupId: submitId,\n        },\n      },\n      global: {\n        components: {\n          'v-select': VueSelect,\n        },\n      },\n    });\n    const datepicker = render(DatePicker, {\n      props: {\n        options: {\n          groupId: submitId,\n        },\n      },\n    });\n    const fileField = render(FileBlock, {\n      props: {\n        type: 'button',\n        options: {\n          groupId: submitId,\n        },\n      },\n    });\n\n    await vi.advanceTimersByTimeAsync(1000);\n    await fireEvent.click(submitButton.container.querySelector('button'));\n    await vi.advanceTimersByTimeAsync(1000);\n    await vi.runAllTimersAsync();\n\n    expect(button.container.querySelector('button').classList.contains('getRed')).toBe(\n      true,\n    );\n    expect(input.container.querySelector('input').classList.contains('input-error')).toBe(\n      true,\n    );\n    expect(\n      textarea.container\n        .querySelector('#textarea-container')\n        .classList.contains('input-error'),\n    ).toBe(true);\n    expect(\n      checkbox.container\n        .querySelector('.checkbox-button')\n        .classList.contains('input-error'),\n    ).toBe(true);\n    expect(\n      select.container.querySelector('.v-select').classList.contains('selectError'),\n    ).toBe(true);\n    expect(\n      datepicker.container.querySelector('input').classList.contains('input-error'),\n    ).toBe(true);\n    expect(\n      fileField\n        .queryByTestId('button-select-field')\n        .querySelector('label')\n        .classList.contains('bg-red-50'),\n    ).toBe(true);\n  });\n\n  it('should validate inputs on \"submitButton\" click', async () => {\n    const submitButton = render(Button, {\n      props: {\n        validationGroupId: submitId,\n      },\n    });\n\n    const button = render(Button, {\n      props: {\n        options: {\n          groupId: submitId,\n        },\n      },\n    });\n    const input = render(Input, {\n      props: {\n        options: {\n          groupId: submitId,\n        },\n      },\n    });\n    const textarea = render(Textarea, {\n      props: {\n        type: 'textarea',\n        options: {\n          groupId: submitId,\n        },\n      },\n    });\n    const checkbox = render(Checkbox, {\n      props: {\n        type: 'checkbox',\n        isActive: true,\n        options: {\n          groupId: submitId,\n        },\n      },\n    });\n    const select = render(Select, {\n      props: {\n        options: {\n          groupId: submitId,\n        },\n        parentValue: { id: '1', name: 'test' },\n      },\n      global: {\n        components: {\n          'v-select': VueSelect,\n        },\n      },\n    });\n    const datepicker = render(DatePicker, {\n      props: {\n        type: 'datePicker',\n        options: {\n          groupId: submitId,\n        },\n        parentValue: new Date().toISOString(),\n      },\n    });\n    const fileField = render(FileBlock, {\n      props: {\n        type: 'button',\n        options: {\n          groupId: submitId,\n        },\n        data: fileData,\n      },\n    });\n\n    const inputValue = 'test';\n    button.container.querySelector('div').classList.add('__VALIDATION_PASSED__');\n    await fireEvent.update(input.container.querySelector('input'), inputValue);\n    await fireEvent.update(textarea.container.querySelector('textarea'), inputValue);\n\n    await fireEvent.click(submitButton.container.querySelector('button'));\n    await vi.advanceTimersByTimeAsync(1000);\n\n    expect(button.container.querySelector('button').classList.contains('getRed')).toBe(\n      false,\n    );\n    expect(input.container.querySelector('input').classList.contains('input-error')).toBe(\n      false,\n    );\n    expect(\n      textarea.container.querySelector('textarea').classList.contains('input-error'),\n    ).toBe(false);\n    expect(\n      checkbox.container\n        .querySelector('.checkbox-button')\n        .classList.contains('input-error'),\n    ).toBe(false);\n    expect(\n      select.container.querySelector('.v-select').classList.contains('selectError'),\n    ).toBe(false);\n    expect(\n      datepicker.container.querySelector('input').classList.contains('input-error'),\n    ).toBe(false);\n    expect(\n      fileField\n        .queryByTestId('button-select-field')\n        .querySelector('[data-testid=\"file-input-container\"]').classList,\n    ).toContain('hidden');\n  });\n\n  it('should not validate incorrect inputs by \"validation-id\" class and submit button should emit \"validation-errors\" with not validated input placeholder and its validation type', async () => {\n    document.body.innerHTML = '';\n    const appContainer = document.createElement('div');\n    appContainer.id = 'app';\n    document.body.appendChild(appContainer);\n    Object.defineProperty(appContainer, 'scrollHeight', { value: 1000 });\n    Object.defineProperty(appContainer, 'clientHeight', { value: 1000 });\n    appContainer.scrollTo = vi.fn();\n\n    const submitButton = render(Button, {\n      props: {\n        validationGroupId: submitId,\n        options: {\n          scrollToError: true,\n        },\n      },\n      container: appContainer,\n    });\n\n    const email = render(Input, {\n      props: {\n        options: {\n          groupId: submitId,\n          validationType: 'email',\n        },\n        placeholder: 'Email',\n        parentValue: 'incorrectEmail@',\n      },\n      container: appContainer,\n    });\n    const number = render(Input, {\n      props: {\n        options: {\n          groupId: submitId,\n          validationType: 'number',\n        },\n        placeholder: 'Number',\n        parentValue: 'incorrectNumber123124',\n      },\n      container: appContainer,\n    });\n    const webSite = render(Input, {\n      props: {\n        options: {\n          groupId: submitId,\n          validationType: 'site',\n        },\n        placeholder: 'Web site',\n        parentValue: 'incorrectWebSite.',\n      },\n      container: appContainer,\n    });\n\n    await fireEvent.click(submitButton.container.querySelector('button'));\n    await vi.advanceTimersByTimeAsync(10);\n\n    const firstInput = document.querySelector(`.validation-id-email`);\n    const firstInputRect = firstInput.getBoundingClientRect();\n    const center = window.innerHeight / 2;\n    const top = firstInputRect.top + appContainer.scrollTop - center;\n    expect(appContainer.scrollTo).toHaveBeenCalledWith({ top, behavior: 'smooth' });\n\n    const expectedValidationErrors = [\n      { index: 0, type: 'email', placeholder: 'Email' },\n      { index: 1, type: 'number', placeholder: 'Number' },\n      { index: 2, type: 'site', placeholder: 'Web site' },\n    ];\n\n    expect(submitButton.emitted('validation-errors')[0][0]).toEqual(\n      expectedValidationErrors,\n    );\n\n    for (let i = 0; i < expectedValidationErrors.length; i++) {\n      const { type } = expectedValidationErrors[i];\n      expect(\n        document\n          .querySelector(`.validation-id-${type}`)\n          .querySelector('input')\n          .classList.contains('input-error'),\n      ).toBe(true);\n    }\n  });\n\n  it('should not validate incorrect inputs by \"validation-id\" class and submit button should emit \"validation-errors\" with not validated input placeholder and its validation type', async () => {\n    const appContainer = document.createElement('div');\n    appContainer.id = 'app';\n    document.body.appendChild(appContainer);\n    Object.defineProperty(appContainer, 'scrollHeight', { value: 1000 });\n    Object.defineProperty(appContainer, 'clientHeight', { value: 1000 });\n    appContainer.scrollTo = vi.fn();\n\n    const submitButton = render(Button, {\n      props: {\n        validationGroupId: submitId,\n      },\n      container: appContainer,\n    });\n\n    const email = render(Input, {\n      props: {\n        options: {\n          groupId: submitId,\n          validationType: 'email',\n        },\n        placeholder: 'Email',\n        parentValue: 'correctEmail@gmail.com',\n      },\n      container: appContainer,\n    });\n    const number = render(Input, {\n      props: {\n        options: {\n          groupId: submitId,\n          validationType: 'number',\n        },\n        placeholder: 'Number',\n        parentValue: '123124',\n      },\n      container: appContainer,\n    });\n    const webSite = render(Input, {\n      props: {\n        options: {\n          groupId: submitId,\n          validationType: 'site',\n        },\n        placeholder: 'Web site',\n        parentValue: 'correctWebSite.com',\n      },\n      container: appContainer,\n    });\n\n    await fireEvent.click(submitButton.container.querySelector('button'));\n    await vi.advanceTimersByTimeAsync(1000);\n\n    expect(appContainer.scrollTo).not.toHaveBeenCalled;\n\n    const inputs = await screen.findAllByTestId('input-container');\n\n    for (const input of inputs) {\n      expect(input.querySelector('input').classList.contains('input-error')).toBe(false);\n    }\n  });\n});\n",
  "lang": "js"
}
