{
  "path": "@/utils/validations/object",
  "template": "import cardValidator from 'card-validator';\nimport * as iban from 'iban';\nimport { isValidPhoneNumber } from 'libphonenumber-js';\n\nexport const ipAddressValidation = (ip) => {\n  const pattern =\n    /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;\n  return pattern.test(ip);\n};\n\nexport const ipAddressValidCharValidation = (char) => {\n  const pattern = /^[0-9.]+$/;\n  return pattern.test(char);\n};\n\nexport const phoneValidation = (phone) => {\n  return isValidPhoneNumber(phone);\n};\n\nexport const sslValidation = (ssl) => {\n  const pattern = /^[a-fA-F0-9]{64}$/;\n  return pattern.test(ssl);\n};\n\nexport const sslValidCharValidation = (char) => {\n  const pattern = /^[a-zA-Z0-9]$/;\n  return pattern.test(char);\n};\n\nexport const phoneValidCharValidation = (char) => {\n  const pattern = /[^\\d+\\-()\\s]/;\n  return pattern.test(char);\n};\n\nexport const ibanValidation = (ibanValue) => {\n  return iban.isValid(ibanValue);\n};\n\nexport const ibanValidCharValidation = (char) => {\n  const pattern = /^[a-zA-Z0-9 ]+$/;\n  return pattern.test(char);\n};\n\nexport const emailValidation = (email) => {\n  const pattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n  return pattern.test(email);\n};\n\nexport const emailValidCharValidation = (char) => {\n  const pattern = /^[a-zA-Z0-9._%+\\-@]$/;\n  return pattern.test(char);\n};\n\nexport const webSiteValidation = (website) => {\n  const pattern = /^(https?:\\/\\/)?([a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}(:[0-9]{1,5})?(\\/\\S*)?$/;\n  return pattern.test(website);\n};\n\nexport const webSiteValidCharValidation = (char) => {\n  const pattern = /^[a-zA-Z0-9.-]+$/;\n  return pattern.test(char);\n};\n\nexport const numberValidation = (number) => {\n  return Number.isInteger(Number(number));\n};\n\nexport const cryptoAddressValidation = (address) => {\n  const result = cryptoAddressRegexes.find((item) => item.regex.test(address));\n  return result ? result.name : false;\n};\n\nexport const cryptoAddressSimpleValidation = (address) => {\n  const pattern = /^[a-zA-Z0-9:/\\-=+_@.#]{20,128}$/;\n  return pattern.test(address);\n};\n\nexport const cryptoAddressValidCharValidation = (char) => {\n  const pattern = /^[a-zA-Z0-9:/\\-=+_@.#]+$/;\n  return pattern.test(char);\n};\n\nexport const nicknameValidation = (nickname) => {\n  const pattern = /^(?!.*\\.\\.)(?!\\.)(?!.*\\.$)[a-zA-Z][a-zA-Z0-9_.]{4,29}$/;\n  return pattern.test(nickname);\n};\n\nexport const companyValidation = (company) => {\n  const pattern = /.{3,}/;\n  return pattern.test(company);\n};\n\nexport const personValidation = (person) => {\n  const pattern = /^[\\p{L}' -]+$/u;\n  return pattern.test(person);\n};\n\nexport const imeiValidation = (imei) => {\n  const pattern = /^(?:\\d[\\s-]?){14}\\d$/;\n  return pattern.test(imei) && luhnCheck(imei);\n};\n\nexport const imeiValidCharValidation = (char) => {\n  const pattern = /^[0-9 ]+$/;\n  return pattern.test(char);\n};\n\nexport const bankCardValidation = (card) => {\n  return cardValidator.number(card).isValid;\n};\n\nexport const bankCardValidCharValidation = (char) => {\n  const pattern = /^[0-9 ]+$/;\n  return pattern.test(char);\n};\n\nexport const macAddressValidation = (mac) => {\n  const pattern = /^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/;\n  return pattern.test(mac);\n};\n\nexport const macAddressValidCharValidation = (char) => {\n  const pattern = /^[0-9A-Fa-f:-]+$/;\n  return pattern.test(char);\n};\n\nconst luhnCheck = (digits) => {\n  digits = digits.replace(/\\D/g, '');\n  let sum = 0;\n  const length = digits.length;\n\n  for (let i = 0; i < length; i++) {\n    let digit = parseInt(digits[length - i - 1], 10);\n    if (i % 2 === 1) {\n      digit *= 2;\n      if (digit > 9) {\n        digit -= 9;\n      }\n    }\n    sum += digit;\n  }\n\n  return sum % 10 === 0;\n};\n\nconst cryptoAddressRegexes = [\n  { name: 'Bitcoin (BTC)', regex: /^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,39}$/ },\n  { name: 'Ethereum (ETH)', regex: /^0x[a-fA-F0-9]{40}$/ },\n  // { name: 'Binance Smart Chain (BSC)', regex: /^0x[a-fA-F0-9]{40}$/ },\n  { name: 'Ripple (XRP)', regex: /^r[1-9A-HJ-NP-Za-km-z]{25,34}$/ },\n  {\n    name: 'Litecoin (LTC)',\n    regex: /^(L[a-zA-Z0-9]{25,33}|[M3][a-zA-Z0-9]{25,33}|ltc1[a-zA-HJ-NP-Z0-9]{39,42})$/,\n  },\n  { name: 'Cardano (ADA)', regex: /^addr1[a-z0-9]{58}$/ },\n  { name: 'Polkadot (DOT)', regex: /^1[a-km-zA-HJ-NP-Z1-9]{46,47}$/ },\n  { name: 'Dogecoin (DOGE)', regex: /^D{1}[5-9A-HJ-NP-U]{1}[1-9A-HJ-NP-Za-km-z]{32}$/ },\n  { name: 'Solana (SOL)', regex: /^[1-9A-HJ-NP-Za-km-z]{44}$/ },\n  { name: 'Tron (TRX)', regex: /^T[a-zA-Z0-9]{33}$/ },\n  // { name: 'Chainlink (LINK)', regex: /^0x[a-fA-F0-9]{40}$/ },\n  { name: 'Stellar (XLM)', regex: /^G[A-D]{1}[A-Z2-7]{54}$/ },\n  { name: 'Monero (XMR)', regex: /^4[0-9AB][1-9A-HJ-NP-Za-km-z]{93}$/ },\n  { name: 'Tezos (XTZ)', regex: /^tz[1-9A-HJ-NP-Za-km-z]{33}$/ },\n  { name: 'Cosmos (ATOM)', regex: /^cosmos1[a-z0-9]{38}$/ },\n  { name: 'Avalanche (AVAX)', regex: /^X-[a-zA-Z0-9]{39}$/ },\n  { name: 'Algorand (ALGO)', regex: /^[A-Z2-7]{58}$/ },\n  // { name: 'VeChain (VET)', regex: /^0x[a-fA-F0-9]{40}$/ },\n  // { name: 'Neo (NEO)', regex: /^A[0-9a-zA-Z]{33}$/ },\n  // { name: 'EOS (EOS)', regex: /^[a-z1-5.]{12}$/ },\n  { name: 'Dash (DASH)', regex: /^X[1-9A-HJ-NP-Za-km-z]{33}$/ },\n  { name: 'Zcash (ZEC)', regex: /^t[1-9A-HJ-NP-Za-km-z]{34}$/ },\n  { name: 'Bitcoin Cash (BCH)', regex: /^(bitcoincash:)?(q|p)[a-z0-9]{41}$/ },\n  { name: 'Filecoin (FIL)', regex: /^f[0-9]{1,2}[a-zA-Z0-9]{40}$/ },\n  { name: 'Terra (LUNA)', regex: /^terra1[a-z0-9]{38}$/ },\n  { name: 'Kusama (KSM)', regex: /^[C-Za-z][1-9A-HJ-NP-Za-km-z]{46}$/ },\n  // { name: 'Hedera Hashgraph (HBAR)', regex: /^0.0.[0-9]{7}$/ },\n  { name: 'IOTA (MIOTA)', regex: /^[A-Z9]{90}$/ },\n  // { name: 'Ontology (ONT)', regex: /^A[0-9a-zA-Z]{33}$/ },\n  { name: 'Waves (WAVES)', regex: /^3P[a-zA-Z0-9]{33}$/ },\n  { name: 'Nano (XNO)', regex: /^nano_[13][1-9a-z]{59}$/ },\n  { name: 'Harmony (ONE)', regex: /^one1[a-z0-9]{38}$/ },\n  { name: 'Elrond (EGLD)', regex: /^erd1[a-z0-9]{58}$/ },\n  // { name: 'Celo (CELO)', regex: /^0x[a-fA-F0-9]{40}$/ },\n  // { name: 'Polygon (MATIC)', regex: /^0x[a-fA-F0-9]{40}$/ },\n  // { name: 'Fantom (FTM)', regex: /^0x[a-fA-F0-9]{40}$/ },\n  // { name: 'Theta (THETA)', regex: /^0x[a-fA-F0-9]{40}$/ },\n  { name: 'ICON (ICX)', regex: /^hx[a-fA-F0-9]{40}$/ },\n  { name: 'Qtum (QTUM)', regex: /^Q[1-9A-HJ-NP-Za-km-z]{33}$/ },\n  { name: 'Decred (DCR)', regex: /^Ds[a-zA-Z0-9]{33}$/ },\n];\n",
  "lang": "js"
}
